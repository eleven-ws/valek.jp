{"version":3,"file":"66beaa885ffbd4413dd7106424a66d6b76571089-10a26d6b87931bd7a1f7.js","mappings":"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","sources":["webpack://valek.jp/../../node_modules/@mui/material/esm/Table/TableContext.js","webpack://valek.jp/../../node_modules/@mui/material/esm/Table/tableClasses.js","webpack://valek.jp/../../node_modules/@mui/material/esm/Table/Table.js","webpack://valek.jp/../../node_modules/@mui/material/esm/Table/Tablelvl2Context.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableBody/tableBodyClasses.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableBody/TableBody.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableCell/tableCellClasses.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableCell/TableCell.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableContainer/tableContainerClasses.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableContainer/TableContainer.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableRow/tableRowClasses.js","webpack://valek.jp/../../node_modules/@mui/material/esm/TableRow/TableRow.js","webpack://valek.jp/./src/components/table.tsx","webpack://valek.jp/../../node_modules/camelcase/index.js","webpack://valek.jp/../src/image-utils.ts","webpack://valek.jp/../src/components/hooks.ts","webpack://valek.jp/../src/components/layout-wrapper.tsx","webpack://valek.jp/../src/components/picture.tsx","webpack://valek.jp/../src/components/placeholder.tsx","webpack://valek.jp/../src/components/main-image.tsx","webpack://valek.jp/../src/components/gatsby-image.server.tsx","webpack://valek.jp/../src/components/gatsby-image.browser.tsx","webpack://valek.jp/../src/components/static-image.server.tsx","webpack://valek.jp/../src/components/static-image.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst TableContext = /*#__PURE__*/React.createContext();\nif (process.env.NODE_ENV !== 'production') {\n  TableContext.displayName = 'TableContext';\n}\nexport default TableContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableUtilityClass(slot) {\n  return generateUtilityClass('MuiTable', slot);\n}\nconst tableClasses = generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);\nexport default tableClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport TableContext from \"./TableContext.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getTableUtilityClass } from \"./tableClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    stickyHeader\n  } = ownerState;\n  const slots = {\n    root: ['root', stickyHeader && 'stickyHeader']\n  };\n  return composeClasses(slots, getTableUtilityClass, classes);\n};\nconst TableRoot = styled('table', {\n  name: 'MuiTable',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.stickyHeader && styles.stickyHeader];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'table',\n  width: '100%',\n  borderCollapse: 'collapse',\n  borderSpacing: 0,\n  '& caption': {\n    ...theme.typography.body2,\n    padding: theme.spacing(2),\n    color: (theme.vars || theme).palette.text.secondary,\n    textAlign: 'left',\n    captionSide: 'bottom'\n  },\n  variants: [{\n    props: ({\n      ownerState\n    }) => ownerState.stickyHeader,\n    style: {\n      borderCollapse: 'separate'\n    }\n  }]\n})));\nconst defaultComponent = 'table';\nconst Table = /*#__PURE__*/React.forwardRef(function Table(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTable'\n  });\n  const {\n    className,\n    component = defaultComponent,\n    padding = 'normal',\n    size = 'medium',\n    stickyHeader = false,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    component,\n    padding,\n    size,\n    stickyHeader\n  };\n  const classes = useUtilityClasses(ownerState);\n  const table = React.useMemo(() => ({\n    padding,\n    size,\n    stickyHeader\n  }), [padding, size, stickyHeader]);\n  return /*#__PURE__*/_jsx(TableContext.Provider, {\n    value: table,\n    children: /*#__PURE__*/_jsx(TableRoot, {\n      as: component,\n      role: component === defaultComponent ? null : 'table',\n      ref: ref,\n      className: clsx(classes.root, className),\n      ownerState: ownerState,\n      ...other\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Table.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the table, normally `TableHead` and `TableBody`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Allows TableCells to inherit padding of the Table.\n   * @default 'normal'\n   */\n  padding: PropTypes.oneOf(['checkbox', 'none', 'normal']),\n  /**\n   * Allows TableCells to inherit size of the Table.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * Set the header sticky.\n   * @default false\n   */\n  stickyHeader: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Table;","'use client';\n\nimport * as React from 'react';\n\n/**\n * @ignore - internal component.\n */\nconst Tablelvl2Context = /*#__PURE__*/React.createContext();\nif (process.env.NODE_ENV !== 'production') {\n  Tablelvl2Context.displayName = 'Tablelvl2Context';\n}\nexport default Tablelvl2Context;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableBodyUtilityClass(slot) {\n  return generateUtilityClass('MuiTableBody', slot);\n}\nconst tableBodyClasses = generateUtilityClasses('MuiTableBody', ['root']);\nexport default tableBodyClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from \"../Table/Tablelvl2Context.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getTableBodyUtilityClass } from \"./tableBodyClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableBodyUtilityClass, classes);\n};\nconst TableBodyRoot = styled('tbody', {\n  name: 'MuiTableBody',\n  slot: 'Root'\n})({\n  display: 'table-row-group'\n});\nconst tablelvl2 = {\n  variant: 'body'\n};\nconst defaultComponent = 'tbody';\nconst TableBody = /*#__PURE__*/React.forwardRef(function TableBody(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableBody'\n  });\n  const {\n    className,\n    component = defaultComponent,\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    component\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(Tablelvl2Context.Provider, {\n    value: tablelvl2,\n    children: /*#__PURE__*/_jsx(TableBodyRoot, {\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref,\n      role: component === defaultComponent ? null : 'rowgroup',\n      ownerState: ownerState,\n      ...other\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableBody.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `TableRow`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableBody;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableCellUtilityClass(slot) {\n  return generateUtilityClass('MuiTableCell', slot);\n}\nconst tableCellClasses = generateUtilityClasses('MuiTableCell', ['root', 'head', 'body', 'footer', 'sizeSmall', 'sizeMedium', 'paddingCheckbox', 'paddingNone', 'alignLeft', 'alignCenter', 'alignRight', 'alignJustify', 'stickyHeader']);\nexport default tableCellClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from \"../utils/capitalize.js\";\nimport TableContext from \"../Table/TableContext.js\";\nimport Tablelvl2Context from \"../Table/Tablelvl2Context.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport tableCellClasses, { getTableCellUtilityClass } from \"./tableCellClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    align,\n    padding,\n    size,\n    stickyHeader\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, stickyHeader && 'stickyHeader', align !== 'inherit' && `align${capitalize(align)}`, padding !== 'normal' && `padding${capitalize(padding)}`, `size${capitalize(size)}`]\n  };\n  return composeClasses(slots, getTableCellUtilityClass, classes);\n};\nconst TableCellRoot = styled('td', {\n  name: 'MuiTableCell',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.padding !== 'normal' && styles[`padding${capitalize(ownerState.padding)}`], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.stickyHeader && styles.stickyHeader];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  ...theme.typography.body2,\n  display: 'table-cell',\n  verticalAlign: 'inherit',\n  // Workaround for a rendering bug with spanned columns in Chrome 62.0.\n  // Removes the alpha (sets it to 1), and lightens or darkens the theme color.\n  borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid\n    ${theme.palette.mode === 'light' ? theme.lighten(theme.alpha(theme.palette.divider, 1), 0.88) : theme.darken(theme.alpha(theme.palette.divider, 1), 0.68)}`,\n  textAlign: 'left',\n  padding: 16,\n  variants: [{\n    props: {\n      variant: 'head'\n    },\n    style: {\n      color: (theme.vars || theme).palette.text.primary,\n      lineHeight: theme.typography.pxToRem(24),\n      fontWeight: theme.typography.fontWeightMedium\n    }\n  }, {\n    props: {\n      variant: 'body'\n    },\n    style: {\n      color: (theme.vars || theme).palette.text.primary\n    }\n  }, {\n    props: {\n      variant: 'footer'\n    },\n    style: {\n      color: (theme.vars || theme).palette.text.secondary,\n      lineHeight: theme.typography.pxToRem(21),\n      fontSize: theme.typography.pxToRem(12)\n    }\n  }, {\n    props: {\n      size: 'small'\n    },\n    style: {\n      padding: '6px 16px',\n      [`&.${tableCellClasses.paddingCheckbox}`]: {\n        width: 24,\n        // prevent the checkbox column from growing\n        padding: '0 12px 0 16px',\n        '& > *': {\n          padding: 0\n        }\n      }\n    }\n  }, {\n    props: {\n      padding: 'checkbox'\n    },\n    style: {\n      width: 48,\n      // prevent the checkbox column from growing\n      padding: '0 0 0 4px'\n    }\n  }, {\n    props: {\n      padding: 'none'\n    },\n    style: {\n      padding: 0\n    }\n  }, {\n    props: {\n      align: 'left'\n    },\n    style: {\n      textAlign: 'left'\n    }\n  }, {\n    props: {\n      align: 'center'\n    },\n    style: {\n      textAlign: 'center'\n    }\n  }, {\n    props: {\n      align: 'right'\n    },\n    style: {\n      textAlign: 'right',\n      flexDirection: 'row-reverse'\n    }\n  }, {\n    props: {\n      align: 'justify'\n    },\n    style: {\n      textAlign: 'justify'\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.stickyHeader,\n    style: {\n      position: 'sticky',\n      top: 0,\n      zIndex: 2,\n      backgroundColor: (theme.vars || theme).palette.background.default\n    }\n  }]\n})));\n\n/**\n * The component renders a `<th>` element when the parent context is a header\n * or otherwise a `<td>` element.\n */\nconst TableCell = /*#__PURE__*/React.forwardRef(function TableCell(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableCell'\n  });\n  const {\n    align = 'inherit',\n    className,\n    component: componentProp,\n    padding: paddingProp,\n    scope: scopeProp,\n    size: sizeProp,\n    sortDirection,\n    variant: variantProp,\n    ...other\n  } = props;\n  const table = React.useContext(TableContext);\n  const tablelvl2 = React.useContext(Tablelvl2Context);\n  const isHeadCell = tablelvl2 && tablelvl2.variant === 'head';\n  let component;\n  if (componentProp) {\n    component = componentProp;\n  } else {\n    component = isHeadCell ? 'th' : 'td';\n  }\n  let scope = scopeProp;\n  // scope is not a valid attribute for <td/> elements.\n  // source: https://html.spec.whatwg.org/multipage/tables.html#the-td-element\n  if (component === 'td') {\n    scope = undefined;\n  } else if (!scope && isHeadCell) {\n    scope = 'col';\n  }\n  const variant = variantProp || tablelvl2 && tablelvl2.variant;\n  const ownerState = {\n    ...props,\n    align,\n    component,\n    padding: paddingProp || (table && table.padding ? table.padding : 'normal'),\n    size: sizeProp || (table && table.size ? table.size : 'medium'),\n    sortDirection,\n    stickyHeader: variant === 'head' && table && table.stickyHeader,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  let ariaSort = null;\n  if (sortDirection) {\n    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';\n  }\n  return /*#__PURE__*/_jsx(TableCellRoot, {\n    as: component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    \"aria-sort\": ariaSort,\n    scope: scope,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableCell.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Set the text-align on the table cell content.\n   *\n   * Monetary or generally number fields **should be right aligned** as that allows\n   * you to add them up quickly in your head without having to worry about decimals.\n   * @default 'inherit'\n   */\n  align: PropTypes.oneOf(['center', 'inherit', 'justify', 'left', 'right']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * Sets the padding applied to the cell.\n   * The prop defaults to the value (`'default'`) inherited from the parent Table component.\n   */\n  padding: PropTypes.oneOf(['checkbox', 'none', 'normal']),\n  /**\n   * Set scope attribute.\n   */\n  scope: PropTypes.string,\n  /**\n   * Specify the size of the cell.\n   * The prop defaults to the value (`'medium'`) inherited from the parent Table component.\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * Set aria-sort direction.\n   */\n  sortDirection: PropTypes.oneOf(['asc', 'desc', false]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * Specify the cell type.\n   * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body', 'footer', 'head']), PropTypes.string])\n} : void 0;\nexport default TableCell;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableContainerUtilityClass(slot) {\n  return generateUtilityClass('MuiTableContainer', slot);\n}\nconst tableContainerClasses = generateUtilityClasses('MuiTableContainer', ['root']);\nexport default tableContainerClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getTableContainerUtilityClass } from \"./tableContainerClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getTableContainerUtilityClass, classes);\n};\nconst TableContainerRoot = styled('div', {\n  name: 'MuiTableContainer',\n  slot: 'Root'\n})({\n  width: '100%',\n  overflowX: 'auto'\n});\nconst TableContainer = /*#__PURE__*/React.forwardRef(function TableContainer(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableContainer'\n  });\n  const {\n    className,\n    component = 'div',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    component\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableContainerRoot, {\n    ref: ref,\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableContainer.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component, normally `Table`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableContainer;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getTableRowUtilityClass(slot) {\n  return generateUtilityClass('MuiTableRow', slot);\n}\nconst tableRowClasses = generateUtilityClasses('MuiTableRow', ['root', 'selected', 'hover', 'head', 'footer']);\nexport default tableRowClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport Tablelvl2Context from \"../Table/Tablelvl2Context.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport tableRowClasses, { getTableRowUtilityClass } from \"./tableRowClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    selected,\n    hover,\n    head,\n    footer\n  } = ownerState;\n  const slots = {\n    root: ['root', selected && 'selected', hover && 'hover', head && 'head', footer && 'footer']\n  };\n  return composeClasses(slots, getTableRowUtilityClass, classes);\n};\nconst TableRowRoot = styled('tr', {\n  name: 'MuiTableRow',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.head && styles.head, ownerState.footer && styles.footer];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: 'inherit',\n  display: 'table-row',\n  verticalAlign: 'middle',\n  // We disable the focus ring for mouse, touch and keyboard users.\n  outline: 0,\n  [`&.${tableRowClasses.hover}:hover`]: {\n    backgroundColor: (theme.vars || theme).palette.action.hover\n  },\n  [`&.${tableRowClasses.selected}`]: {\n    backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, (theme.vars || theme).palette.action.selectedOpacity),\n    '&:hover': {\n      backgroundColor: theme.alpha((theme.vars || theme).palette.primary.main, `${(theme.vars || theme).palette.action.selectedOpacity} + ${(theme.vars || theme).palette.action.hoverOpacity}`)\n    }\n  }\n})));\nconst defaultComponent = 'tr';\n/**\n * Will automatically set dynamic row height\n * based on the material table element parent (head, body, etc).\n */\nconst TableRow = /*#__PURE__*/React.forwardRef(function TableRow(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiTableRow'\n  });\n  const {\n    className,\n    component = defaultComponent,\n    hover = false,\n    selected = false,\n    ...other\n  } = props;\n  const tablelvl2 = React.useContext(Tablelvl2Context);\n  const ownerState = {\n    ...props,\n    component,\n    hover,\n    selected,\n    head: tablelvl2 && tablelvl2.variant === 'head',\n    footer: tablelvl2 && tablelvl2.variant === 'footer'\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TableRowRoot, {\n    as: component,\n    ref: ref,\n    className: clsx(classes.root, className),\n    role: component === defaultComponent ? null : 'row',\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? TableRow.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Should be valid `<tr>` children such as `TableCell`.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the table row will shade on hover.\n   * @default false\n   */\n  hover: PropTypes.bool,\n  /**\n   * If `true`, the table row will have the selected shading.\n   * @default false\n   */\n  selected: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default TableRow;","import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport MuiTable from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\n\ninterface Data {\n  key: string;\n  value: string | React.ReactNode;\n}\n\nexport const Table = (props: any) => {\n  const { data }: { data: Data[] } = props;\n\n  return (\n    <Box bgcolor='background.paper' py={4}>\n      <Box maxWidth='md' mx='auto'>\n        <TableContainer {...props}>\n          <MuiTable>\n            <TableBody>\n              {data.map(({ key, value }, i) => (\n                <TableRow key={i}>\n                  <TableCell sx={{ width: '25%' }}>\n                    <Typography fontWeight='bold'>{key}</Typography>\n                  </TableCell>\n                  <TableCell sx={{ fontSize: 16 }}>{value}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </MuiTable>\n        </TableContainer>\n      </Box>\n    </Box>\n  );\n};\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n"],"names":["getTableUtilityClass","slot","generateUtilityClass","generateUtilityClasses","TableRoot","styled","name","overridesResolver","props","styles","ownerState","root","stickyHeader","memoTheme","theme","display","width","borderCollapse","borderSpacing","typography","body2","padding","spacing","color","vars","palette","text","secondary","textAlign","captionSide","variants","style","defaultComponent","inProps","ref","className","component","size","other","classes","slots","composeClasses","useUtilityClasses","table","Provider","value","children","as","role","clsx","getTableBodyUtilityClass","TableBodyRoot","tablelvl2","variant","getTableCellUtilityClass","TableCellRoot","capitalize","align","verticalAlign","borderBottom","TableCell","border","mode","lighten","alpha","divider","darken","primary","lineHeight","pxToRem","fontWeight","fontWeightMedium","fontSize","paddingCheckbox","flexDirection","position","top","zIndex","backgroundColor","background","default","componentProp","paddingProp","scope","scopeProp","sizeProp","sortDirection","variantProp","isHeadCell","undefined","ariaSort","getTableContainerUtilityClass","TableContainerRoot","overflowX","getTableRowUtilityClass","TableRowRoot","head","footer","outline","hover","action","selected","main","selectedOpacity","hoverOpacity","TableRow","Table","data","___EmotionJSX","Box","bgcolor","py","maxWidth","mx","TableContainer","MuiTable","TableBody","map","_ref","i","key","sx","Typography","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","options","Array","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","x","trim","filter","length","join","toLowerCase","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","slice","preserveCamelCase","replace","lastIndex","m1","charAt","_","identifier","m","postProcess","module","exports","W","hasNativeLazyLoadSupport","HTMLImageElement","prototype","e","t","a","Boolean","images","fallback","src","gatsbyImageData","gatsbyImage","childImageSharp","z","s","height","P","h","loading","shouldLoad","opacity","A","r","n","o","l","left","bottom","right","objectFit","objectPosition","d","transition","H","F","_ref5","layout","paddingTop","alt","G","u","V","B","U","srcSet","decoding","Y","sources","sizes","_ref6","media","type","X","propTypes","isRequired","displayName","J","Z","Error","K","Q","ee","te","ae","_len","arguments","_key","c","apply","concat","ie","image","se","re","ne","Set","oe","le","de","class","g","onStartLoad","p","onLoad","onError","f","w","y","b","v","E","k","S","M","N","$","JSON","stringify","I","then","_ref7","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","add","has","_ref8","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ce","he","ue","__imageData","__error","console","warn","ge","imgClassName","imgStyle","placeholder","pe","_len2","_key2","me","fe","we"],"sourceRoot":""}